{"version":3,"sources":["components/Listitem.js","App.js","serviceWorker.js","index.js"],"names":["Listitem","props","itemlist","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","onClick","deleteItem","icon","library","add","faTrash","App","state","Currentitem","handelInput","bind","addItem","event","this","setState","Date","now","preventDefault","newItem","console","log","newItems","filteredItems","filter","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2TAgCeA,MA7Bf,SAAkBC,GACd,IACMC,EADQD,EAAME,MACGC,KAAI,SAAAC,GACvB,OACI,yBAAKC,UAAY,OAAOC,IAAOF,EAAKE,KAChC,2BACI,2BAAOC,KAAM,OACbC,GAAMJ,EAAKE,IACXG,MAASL,EAAKM,KACdC,SAAa,SAACC,GACVZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAML,EAAKE,QAG5C,8BACA,kBAAC,IAAD,CAAiBD,UAAU,UAAUU,QAAS,WAC9Cf,EAAMgB,WAAWZ,EAAKE,MACnBW,KAAK,gBAMpB,OACI,yBAAKZ,UAAY,YACZJ,I,aCrBbiB,EAAQC,IAAIC,K,IAyFGC,E,kDArFf,WAAarB,GAAO,IAAD,8BACjB,cAAMA,IACDsB,MAAQ,CACXpB,MAAQ,GACRqB,YAAc,CACZb,KAAM,IACNJ,IAAM,KAIV,EAAKkB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKT,WAAa,EAAKA,WAAWS,KAAhB,gBAClB,EAAKZ,UAAY,EAAKA,UAAUY,KAAf,gBAbA,E,wDAgBPE,GACVC,KAAKC,SAAS,CACZN,YAAa,CACXb,KAAOiB,EAAMb,OAAOL,MACpBH,IAAMwB,KAAKC,W,8BAKTJ,GACNA,EAAMK,iBACN,IAAMC,EAAUL,KAAKN,MAAMC,YAE3B,GADAW,QAAQC,IAAIF,GACG,MAAZA,EAAgB,CACjB,IAAMG,EAAQ,sBAAOR,KAAKN,MAAMpB,OAAlB,CAA0B+B,IACxCL,KAAKC,SAAS,CACZ3B,MAAQkC,EACRb,YAAc,CACZb,KAAM,GACNJ,IAAM,S,iCAMHA,GACT,IAAM+B,EAAgBT,KAAKN,MAAMpB,MAAMoC,QAAO,SAAAlC,GAAI,OAChDA,EAAKE,MAAQA,KACbsB,KAAKC,SAAS,CACZ3B,MAAQmC,M,gCAIJ3B,EAAKJ,GACb4B,QAAQC,IAAI,SAASP,KAAKN,MAAMpB,OAC9B,IAAMA,EAAQ0B,KAAKN,MAAMpB,MACzBA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAMA,IAEZF,EAAKM,KAAMA,MAGfkB,KAAKC,SAAS,CACZ3B,MAAOA,M,+BAKT,OACE,yBAAKG,UAAY,OACf,gCACA,0BAAMG,GAAK,aAAa+B,SAAYX,KAAKF,SACvC,2BACAnB,KAAM,OACNE,MAASmB,KAAKN,MAAMC,YAAYb,KAChCC,SAAYiB,KAAKJ,YACjBgB,YAAc,eACd,4BAAQjC,KAAO,UAAf,SAGJ,kBAAC,EAAD,CAAUL,MAAS0B,KAAKN,MAAMpB,MAC9Bc,WAAcY,KAAKZ,WACnBH,UAAce,KAAKf,iB,GAhFP4B,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.c9f133b3.chunk.js","sourcesContent":["import React from 'react';\nimport './Listitem.css';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nfunction Listitem(props){\n    const items = props.items\n    const itemlist = items.map(item=> {\n        return (\n            <div className = \"list\" key = {item.key}>\n                <p>\n                    <input type =\"text\"\n                    id = {item.key}\n                    value = {item.text}\n                    onChange =  {(e)=>{\n                        props.setUpdate(e.target.value,item.key)\n                    }}\n                    />\n                <span> \n                <FontAwesomeIcon className=\"faicons\" onClick={() => {\n                props.deleteItem(item.key)\n                }} icon=\"trash\" />\n                </span>\n                </p>\n            </div>\n        )\n    })\n    return(\n        <div className = \"listitem\">\n            {itemlist}\n        </div>\n    )\n}\n\nexport default Listitem;","import React from 'react';\nimport './App.css';\n// import Tasklist from './components/Tasklist';\nimport Listitem from './components/Listitem';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nlibrary.add(faTrash);\n\nclass App extends React.Component {\n\nconstructor (props){\n  super(props);\n  this.state = {\n    items : [ ],\n    Currentitem : {\n      text :\" \",\n      key : '',\n    }\n  }\n\n  this.handelInput = this.handelInput.bind(this)\n  this.addItem = this.addItem.bind(this)\n  this.deleteItem = this.deleteItem.bind(this)\n  this.setUpdate = this.setUpdate.bind(this)\n}\n\nhandelInput(event){\n  this.setState({\n    Currentitem :{\n      text : event.target.value,\n      key : Date.now()\n    }\n  })\n}\n\naddItem(event){\n  event.preventDefault();\n  const newItem = this.state.Currentitem;\n  console.log(newItem);\n  if(newItem !== \" \"){\n    const newItems = [...this.state.items , newItem]\n    this.setState({\n      items : newItems,\n      Currentitem : {\n        text :'',\n        key : ''\n      }\n    })\n  }\n}\n\ndeleteItem(key){\n  const filteredItems = this.state.items.filter(item =>\n    item.key !== key )\n    this.setState({\n      items : filteredItems\n    })\n}\n\nsetUpdate(text,key){\n  console.log(\"items:\"+this.state.items);\n    const items = this.state.items;\n    items.map(item=>{        \n      if(item.key===key){\n        //console.log(item.key +\"    \"+key)\n        item.text= text;\n      }\n    })\n    this.setState({\n      items: items\n    })\n}\n\n render() { \n    return ( \n      <div className = \"App\">\n        <header>\n        <form id = \"to-do-form\" onSubmit = {this.addItem}>\n          <input \n          type =\"text\" \n          value = {this.state.Currentitem.text}\n          onChange = {this.handelInput}\n          placeholder = \"enter text\"></input>\n          <button type = \"submit\">Add</button>\n        </form>\n      </header>\n      <Listitem items = {this.state.items}\n      deleteItem = {this.deleteItem} \n      setUpdate  = {this.setUpdate}\n      />\n      </div>\n     );\n  }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}